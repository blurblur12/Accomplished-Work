add $3, $0, $0
add $7, $0, $0
add $8, $1, $0

height:
; push resgisters onto stack
sw $1, -4($30)
sw $2, -8($30)
sw $4, -12($30)
sw $5, -16($30)
sw $6, -20($30)
sw $9, -24($30)
sw $31, -28($30)
lis $4
.word 28
sub $30, $30, $4

lis $2
.word -1
lis $4
.word 4
lis $6
.word height

add $9, $1, $0
add $1, $1, $4  ; go to the address of left child index
lw $5, 0($1)
beq $5, $2, 4   ; left child empty skip
mult $5, $4
mflo $5
add $1, $8, $5  ; recurse on left child
jalr $6         ; $3 now contain height of left child
add $7, $0, $3  ; move left child height from $3 to $7
add $3, $0, $0
add $1, $9, $4
add $1, $1, $4
lw $5, 0($1)
beq $5, $2, 6  ; right child empty skip
mult $5, $4
mflo $5
add $1, $8, $5  ; recurse on right child
lis $6
.word height
jalr $6         ; $3 now contain height of right child
slt $4, $7, $3
bne $4, $0, 1
add $3, $0, $7  ; let $3 be the max(left child height, right child height)
lis $2
.word 1
add $3, $3, $2  ; $3 + 1 add the root

end:
lis $4
.word 28
add $30, $30, $4
lw $1, -4($30)
lw $2, -8($30)
lw $4, -12($30)
lw $5, -16($30)
lw $6, -20($30)
lw $9, -24($30)
lw $31, -28($30)
jr $31
